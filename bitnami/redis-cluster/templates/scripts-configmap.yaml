{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-scripts
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    set -e

    REDIS_STATUS_FILE=/tmp/.redis_cluster_check

    {{- if .Values.usePassword }}
    export REDISCLI_AUTH={{ ternary "`cat $REDIS_PASSWORD_FILE`" "$REDIS_PASSWORD" .Values.usePasswordFiles }}
    {{- end }}
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
{{- if .Values.tls.enabled }}
        -p $REDIS_TLS_PORT_NUMBER \
        --tls \
        --cert {{ template "redis-cluster.tlsCert" . }} \
        --key {{ template "redis-cluster.tlsCertKey" . }} \
        --cacert {{ template "redis-cluster.tlsCACert" . }} \
{{- else }}
        -p $REDIS_PORT_NUMBER \
{{- end }}
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
{{- if not .Values.cluster.externalAccess.enabled }}
    if [ ! -f "$REDIS_STATUS_FILE" ]; then
      response=$(
        timeout -s 15 $1 \
        redis-cli \
          -h localhost \
  {{- if .Values.tls.enabled }}
          -p $REDIS_TLS_PORT_NUMBER \
          --tls \
          --cert {{ template "redis-cluster.tlsCert" . }} \
          --key {{ template "redis-cluster.tlsCertKey" . }} \
          --cacert {{ template "redis-cluster.tlsCACert" . }} \
  {{- else }}
          -p $REDIS_PORT_NUMBER \
  {{- end }}
          CLUSTER INFO | grep cluster_state | tr -d '[:space:]'
      )
      if [ "$?" -eq "124" ]; then
        echo "Timed out"
        exit 1
      fi
      if [ "$response" != "cluster_state:ok" ]; then
        echo "$response"
        exit 1
      else
        touch "$REDIS_STATUS_FILE"
      fi
    fi
{{- end }}
  ping_liveness_local.sh: |-
    #!/bin/bash
    set -e

    {{- if .Values.usePassword }}
    export REDISCLI_AUTH={{ ternary "`cat $REDIS_PASSWORD_FILE`" "$REDIS_PASSWORD" .Values.usePasswordFiles }}
    {{- end }}
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
{{- if .Values.tls.enabled }}
        -p $REDIS_TLS_PORT_NUMBER \
        --tls \
        --cert {{ template "redis-cluster.tlsCert" . }} \
        --key {{ template "redis-cluster.tlsCertKey" . }} \
        --cacert {{ template "redis-cluster.tlsCACert" . }} \
{{- else }}
        -p $REDIS_PORT_NUMBER \
{{- end }}
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  prestop-redis-cluster.sh: |-
    #!/bin/bash
    set -e

    # redis-cli automatically consumes credentials from the REDISCLI_AUTH variable
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    [[ -f "$REDIS_PASSWORD_FILE" ]] && export REDISCLI_AUTH="$(< "${REDIS_PASSWORD_FILE}")"

    run_redis_command() {
        local args=("-h" "$1")
        shift
    {{- if .Values.tls.enabled }}
        args+=("--tls" "--cert" "{{ template "redis-cluster.tlsCert" . }}" "--key" "{{ template "redis-cluster.tlsCertKey" . }}" "--cacert" "{{ template "redis-cluster.tlsCACert" . }}" "-p" $REDIS_TLS_PORT_NUMBER)
    {{- else }}
        args+=("-p" $REDIS_PORT_NUMBER)
    {{- end }}
        redis-cli "${args[@]}" "$@"
    }

    is_master() {
        REDIS_ROLE=$(run_redis_command 127.0.0.1 ROLE | head -1)
        [[ "$REDIS_ROLE" == "master" ]]
    }

    get_cluster_node_id() {
        CLUSTER_ID=$(run_redis_command 127.0.0.1 CLUSTER MYID | head -1)
        echo $CLUSTER_ID
    }

    get_replica_ips() {
      CLUSTER_NODE_ID=$(get_cluster_node_id)

      # Get a list of replica IP addresses that could be promoted
      # Use shuf to randomize the order
      REPLICAS="$(run_redis_command 127.0.0.1 CLUSTER REPLICAS $CLUSTER_NODE_ID | grep -Ev "(disconnected|nofailover|noaddr|handshake)" | cut -d " " -f 2 | cut -d ":" -f 1 | shuf)"
      echo "$REPLICAS" | sed '/^[[:space:]]*$/d'
    }

    if is_master; then
      # Get list of replicas of the current master
      mapfile -t REPLICA_IPS < <( get_replica_ips )

      NUM_REPLICAS=${#REPLICA_IPS[@]}
      echo "Found $NUM_REPLICAS available replicas"

      # Iterate over replicas, attempting to promote one
      for REPLICA_IP in "${REPLICA_IPS[@]}"; do
        echo "Going to fail over to replica at $REPLICA_IP"
        result=$(run_redis_command $REPLICA_IP CLUSTER FAILOVER)

        if [[ "$result" == "OK" ]]; then
          {{- if .Values.cluster.redisShutdownWaitFailover }}
          # Wait for clients to update their topology
          sleep 10
          {{- end }}
          break
        fi
      done
    else
      exit 0
    fi

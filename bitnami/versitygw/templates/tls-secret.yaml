{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if and .Values.tls.enabled (not .Values.tls.existingSecret) (or (not .Values.tls.autoGenerated.enabled) (and .Values.tls.autoGenerated.enabled (eq .Values.tls.autoGenerated.engine "helm"))) }}
{{- $secretName := printf "%s-crt" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
{{- $caValue := "" }}
{{- $certValue := "" }}
{{- $keyValue := "" }}
{{- if .Value.tls.autoGenerated.enabled }}
  {{- $ca := genCA "versitygw-ca" 365 }}
  {{- $fullname := include "common.names.fullname" . }}
  {{- $releaseNamespace := include "common.names.namespace" . }}
  {{- $clusterDomain := .Values.clusterDomain }}
  {{- $serviceName := include "common.names.fullname" . }}
  {{- $altNames := list (printf "*.%s.%s.svc.%s" $serviceName $releaseNamespace $clusterDomain) (printf "%s.%s.svc.%s" $serviceName $releaseNamespace $clusterDomain) (printf "*.%s.%s.svc.%s" $releaseNamespace $clusterDomain) "localhost" "127.0.0.1" $fullname }}
  {{- $cert := genSignedCert $fullname nil $altNames 365 $ca }}
  {{- $caValue = $ca.Cert }}
  {{- $certValue = $cert.Cert }}
  {{- $keyValue = $cert.Key }}
{{- else }}
  {{- $caValue = .Values.tls.autoGenerated.ca }}
  {{- $certValue = required "When tls.autoGenerated=false you need to provide tls.cert" .Values.tls.cert }}
  {{- $keyValue = required "When tls.autoGenerated=false you need to provide tls.key" .Values.tls.key }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: versitygw
    app.kubernetes.io/part-of: versitygw
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ include "common.secrets.lookup" (dict "secret" $secretName "key" "tls.crt" "defaultValue" $certValue "context" $) }}
  tls.key: {{ include "common.secrets.lookup" (dict "secret" $secretName "key" "tls.key" "defaultValue" $keyValue "context" $) }}
  {{- if $caValue }}
  ca.crt: {{ include "common.secrets.lookup" (dict "secret" $secretName "key" "tls.key" "defaultValue" $caValue "context" $) }}
  {{- end }}
{{- end }}

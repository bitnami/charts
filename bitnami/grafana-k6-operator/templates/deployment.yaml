{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- $labels := include "common.tplvalues.merge" ( dict "values" (list .Values.commonLabels .Values.deploymentLabels) "context" . ) }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" $labels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: grafana-k6-operator
    app.kubernetes.io/component: grafana-k6-operator
  {{- if or .Values.deploymentAnnotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.deploymentAnnotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.podLabels .Values.commonLabels) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/part-of: grafana-k6-operator
      app.kubernetes.io/component: grafana-k6-operator
  template:
    metadata:
      {{- $podAnnotations := include "common.tplvalues.merge" (dict "values" (list .Values.podAnnotations .Values.commonAnnotations) "context" .) }}
      {{- if or .Values.podAnnotations .Values.commonAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" $podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.podLabels .Values.commonLabels) "context" .) }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/part-of: grafana-k6-operator
        app.kubernetes.io/component: grafana-k6-operator
    spec:
      serviceAccountName: {{ template "grafana-k6-operator.serviceAccountName" . }}
      {{- include "grafana-k6-operator.imagePullSecrets" . | nindent 6 }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "grafana-k6-operator" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "grafana-k6-operator" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: grafana-k6-operator
          image: {{ template "grafana-k6-operator.operator.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            {{- if or (gt (int .Values.replicaCount) 1) .Values.autoscaling.hpa.enabled }}
            - --enable-leader-election
            {{- end }}
            - --metrics-addr=:{{ .Values.containerPorts.metrics }}
            - --health-addr=:{{ .Values.containerPorts.health }}
            {{- if .Values.extraArgs }}
            {{- range .Values.extraArgs }}
            - {{ . | quote }}
            {{- end }}
            {{- end }}
          {{- end }}
          env:
            - name: STARTER_DEFAULT_IMAGE
              value: {{ include "grafana-k6-operator.starter.image" . | quote }}
            - name: RUNNER_DEFAULT_IMAGE
              value: {{ include "grafana-k6-operator.runner.image" . }}
           {{- if not .Values.watchAllNamespaces }}
            - name: WATCH_NAMESPACE
              value: {{ include "common.names.namespace" . | quote }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: http-metrics
              containerPort: {{ .Values.containerPorts.metrics }}
            - name: https-health
              containerPort: {{ .Values.containerPorts.health }}
            {{- if .Values.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 12 }}
            # Not using the health port due to upstream bug
            # https://github.com/grafana/k6-operator/issues/582
            tcpSocket:
              port: http-metrics
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 12 }}
            # Not using the health port due to upstream bug
            # https://github.com/grafana/k6-operator/issues/582
            httpGet:
              path: /metrics
              port: http-metrics
          {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 12 }}
            # Not using the health port due to upstream bug
            # https://github.com/grafana/k6-operator/issues/582
            httpGet:
              path: /metrics
              port: http-metrics
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          volumeMounts: {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if and .Values.metrics.authProxy.enabled .Values.metrics.enabled }}
        - name: kube-auth-proxy
          image: {{ template "grafana-k6-operator.authProxy.image" . }}
          imagePullPolicy: {{ .Values.metrics.authProxy.image.pullPolicy }}
          {{- if .Values.metrics.authProxy.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.metrics.authProxy.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.metrics.authProxy.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.metrics.authProxy.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - --secure-listen-address=0.0.0.0:{{ .Values.metrics.authProxy.containerPorts.https }}
            - --upstream=http://127.0.0.1:{{ .Values.containerPorts.metrics }}/
            - --proxy-endpoints-port={{ .Values.metrics.authProxy.containerPorts.health }}
            - --logtostderr=true
            {{- if .Values.metrics.authProxy.extraArgs }}
            {{- range .Values.metrics.authProxy.extraArgs }}
            - {{ . | quote }}
            {{- end }}
            {{- end }}
          {{- end }}
          env:
            {{- if .Values.metrics.authProxy.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.metrics.authProxy.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.metrics.authProxy.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.metrics.authProxy.resources }}
          resources: {{- toYaml .Values.metrics.authProxy.resources | nindent 12 }}
          {{- else if ne .Values.metrics.authProxy.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.metrics.authProxy.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: https
              containerPort: {{ .Values.metrics.authProxy.containerPorts.https }}
            - name: https-health
              containerPort: {{ .Values.metrics.authProxy.containerPorts.health }}
            {{- if .Values.metrics.authProxy.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if .Values.metrics.authProxy.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.metrics.authProxy.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.metrics.authProxy.livenessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: https-health
          {{- end }}
          {{- if .Values.metrics.authProxy.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.metrics.authProxy.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.metrics.authProxy.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: https-health
          {{- end }}
          {{- if .Values.metrics.authProxy.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.metrics.authProxy.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.metrics.authProxy.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: https-health
          {{- end }}
          {{- if .Values.metrics.authProxy.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.metrics.authProxy.extraVolumeMounts }}
          volumeMounts: {{- include "common.tplvalues.render" (dict "value" .Values.metrics.authProxy.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.extraVolumes }}
      volumes: {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
      {{- end }}
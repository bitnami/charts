{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if and (not .Values.kyverno.tls.existingCASecret) (or (not .Values.kyverno.tls.autoGenerated.enabled) (and .Values.kyverno.tls.autoGenerated.enabled (eq .Values.kyverno.tls.autoGenerated.engine "helm"))) }}
{{- /*
  Kyverno requires a secret with the CA in the form of tls keypair
  Source: https://github.com/kyverno/kyverno/blob/main/charts/kyverno/templates/admission-controller/secret.yaml#L8
  */}}
{{- $caCert := "" }}
{{- $caKey := "" }}
{{- $ca := genCA "kyverno-ca" 1024 }}
{{- if .Values.kyverno.tls.autoGenerated.enabled }}
  {{- $caCert = $ca.Cert }}
  {{- $caKey = $ca.Key }}
{{- else }}
  {{- $caCert = required "When tls.autoGenerated=false you need to provide tls.CACert" .Values.kyverno.tls.CACert }}
  {{- $caKey = required "When tls.autoGenerated=false you need to provide tls.CAKey" .Values.kyverno.tls.CAKey }}
{{- end }}
{{- $caSecretName := printf "%s-ca" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $caSecretName }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/part-of: kyverno
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ include "common.secrets.lookup" (dict "secret" $caSecretName "key" "kyverno.tls.caCert" "defaultValue" $caCert "context" $) }}
  tls.key: {{ include "common.secrets.lookup" (dict "secret" $caSecretName "key" "kyverno.tls.caKey" "defaultValue" $caKey "context" $) }}
{{- if not .Values.admissionController.tls.existingSecret }}
---
{{- $admControllerCert := "" }}
{{- $admControllerKey := "" }}
{{- if .Values.kyverno.tls.autoGenerated.enabled }}
  {{- $releaseNamespace := include "common.names.namespace" . }}
  {{- $clusterDomain := .Values.clusterDomain }}
  {{- $serviceName := include "kyverno.admission-controller.fullname" . }}
  {{- $altNames := list $serviceName (printf "%s.%s" $serviceName $releaseNamespace) (printf "%s.%s.svc" $serviceName $releaseNamespace) (printf "%s.%s.svc.%s" $serviceName $releaseNamespace $clusterDomain) "localhost" "127.0.0.1" }}
  {{- $admcert := genSignedCert $serviceName nil $altNames 1024 $ca }}
  {{- $admControllerCert = $admcert.Cert }}
  {{- $admControllerKey = $admcert.Key }}
{{- else }}
  {{- $admControllerCert = required "When tls.autoGenerated=false you need to provide admissionController.tls.cert" .Values.admissionController.tls.cert }}
  {{- $admControllerKey = required "When tls.autoGenerated=false you need to provide admissionController.tls.key" .Values.admissionController.tls.key }}
{{- end }}
{{- $admControllerSecretName := printf "%s-tls" (include "kyverno.admission-controller.fullname" .) | trunc 63 | trimSuffix "-" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $admControllerSecretName }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: admission-controller
    app.kubernetes.io/part-of: kyverno
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ include "common.secrets.lookup" (dict "secret" $admControllerSecretName "key" "admissionController.tls.cert" "defaultValue" $admControllerCert "context" $) }}
  tls.key: {{ include "common.secrets.lookup" (dict "secret" $admControllerSecretName "key" "admissionController.tls.key" "defaultValue" $admControllerKey "context" $) }}
  ca.crt: {{ include "common.secrets.lookup" (dict "secret" $admControllerSecretName "key" "kyverno.tls.caCert" "defaultValue" $caCert "context" $) }}
{{- end }}
{{- if and .Values.cleanupController.enabled (not .Values.cleanupController.tls.existingSecret) }}
---
{{- $clnControllerCert := "" }}
{{- $clnControllerKey := "" }}
{{- if .Values.kyverno.tls.autoGenerated.enabled }}
  {{- $releaseNamespace := include "common.names.namespace" . }}
  {{- $clusterDomain := .Values.clusterDomain }}
  {{- $serviceName := include "kyverno.admission-controller.fullname" . }}
  {{- $altNames := list  $serviceName (printf "%s.%s" $serviceName $releaseNamespace) (printf "%s.%s.svc" $serviceName $releaseNamespace) (printf "%s.%s.svc.%s" $serviceName $releaseNamespace $clusterDomain) "localhost" "127.0.0.1" }}
  {{- $clncert := genSignedCert $serviceName nil $altNames 365 $ca }}
  {{- $clnControllerCert = $clncert.Cert }}
  {{- $clnControllerKey = $clncert.Key }}
{{- else }}
  {{- $caCert = required "When tls.autoGenerated=false you need to provide cleanupController.tls.cert" .Values.cleanupController.tls.cert }}
  {{- $caKey = required "When tls.autoGenerated=false you need to provide cleanupController.tls.key" .Values.cleanupController.tls.key }}
{{- end }}
{{- $clnControllerSecretName := printf "%s-tls" (include "kyverno.cleanup-controller.fullname" .) | trunc 63 | trimSuffix "-" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $clnControllerSecretName }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: cleanup-controller
    app.kubernetes.io/part-of: kyverno
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ include "common.secrets.lookup" (dict "secret" $clnControllerSecretName "key" "cleanupController.tls.cert" "defaultValue" $clnControllerCert "context" $) }}
  tls.key: {{ include "common.secrets.lookup" (dict "secret" $clnControllerSecretName "key" "cleanupController.tls.key" "defaultValue" $clnControllerKey "context" $) }}
  ca.crt: {{ include "common.secrets.lookup" (dict "secret" $clnControllerSecretName "key" "kyverno.tls.caCert" "defaultValue" $caCert "context" $) }}
{{- end }}
{{- end }}

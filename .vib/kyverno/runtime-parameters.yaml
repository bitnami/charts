# As they are scratch containers, we cannot properly run goss tests
# Instead, we will deploy a sample policy and run ginkgo tests to ensure
# that it is properly created
# Example taken from https://github.com/kyverno/policies/blob/3f5ec757666c5d113c970f1ac996cb2ea8685cf2/other/add-image-as-env-var/add-image-as-env-var.yaml#L32
# 
# The example patches newly created pods to include the container image in an env var K8S_IMAGE. We will
# verify in the ginkgo tests that this env var is properly added
extraDeploy:
- |
  apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    name: add-image-as-env-var
    annotations:
      pod-policies.kyverno.io/autogen-controllers: none
      policies.kyverno.io/title: Add Image as Environment Variable
      policies.kyverno.io/category: Other
      policies.kyverno.io/severity: medium
      kyverno.io/kyverno-version: "{{ .Chart.AppVersion }}"
      kyverno.io/kubernetes-version: "1.26"
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/description: >-
        The Kubernetes downward API only has the ability to express so many
        options as environment variables. The image consumed in a Pod is commonly
        needed to make the application aware of some logic it must take. This policy
        takes the value of the `image` field and adds it as an environment variable
        to Pods.
  spec:
    rules:
    - name: pod-containers-inject-image
      match:
        any:
        - resources:
            kinds:
            - Pod
      mutate:
        foreach:
        - list: request.object.spec.containers[]
          patchesJson6902: |-
            - op: add
              path: /spec/containers/{{ "{{elementIndex}}" }}/env/-
              value:
                name: K8S_IMAGE
                value: "{{ "{{ element.image }}" }}"